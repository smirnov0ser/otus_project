
Процедура РегламентноеЗадание_ОтправитьВRMQ() Экспорт
	
	//1. Остатки товаров 	
	Маршрут = "CRM_remaining";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	Если ПараметрыRMQ = Неопределено Тогда
		ВызватьИсключение "Не заданы параметры подключения "+Маршрут;
	КонецЕсли;	
	ОтправитьВRMQ_ОстаткиТоваров(ПараметрыRMQ,Маршрут);	
		
	//2. Статусы заказов 
	Маршрут = "CRM_OrderStatus";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	Если ПараметрыRMQ = Неопределено Тогда
		ВызватьИсключение "Не заданы параметры подключения "+Маршрут;
	КонецЕсли; 
	ОтправитьВRMQ_СтатусыЗаказов(ПараметрыRMQ,Маршрут);
	
	
КонецПроцедуры

Процедура ОтправитьВRMQ_ОстаткиТоваров(ПараметрыRMQ,Маршрут) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьRMQ.ID КАК ID,
		|	ОчередьRMQ.Сообщение КАК Сообщение,
		|	ОчередьRMQ.Маршрутизация КАК Маршрутизация
		|ИЗ
		|	РегистрСведений.ОчередьRMQ КАК ОчередьRMQ
		|ГДЕ
		|	ОчередьRMQ.Маршрутизация = &Маршрутизация";
	Запрос.УстановитьПараметр("Маршрутизация",Маршрут);
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КлиентКомпоненты = ПолучитьКомпонентуСервер();
		КлиентКомпоненты.Connect(ПараметрыRMQ.Адрес,ПараметрыRMQ.Порт,ПараметрыRMQ.Логин,ПараметрыRMQ.Пароль,ПараметрыRMQ.ВиртуальныйХост);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 			
			Попытка							
				КлиентКомпоненты.BasicPublish(ПараметрыRMQ.ТочкаОбмена,Выборка.Маршрутизация,Выборка.Сообщение,1,Ложь); 
				
				//очистка очереди из 1С
				МЗ = РегистрыСведений.ОчередьRMQ.СоздатьМенеджерЗаписи();
				МЗ.ID = Выборка.ID; 
				МЗ.Удалить();
				
			Исключение
				СистемнаяОшибка = ОписаниеОшибки();
				ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
					
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьВRMQ_СтатусыЗаказов(ПараметрыRMQ,Маршрут) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьRMQ.ID КАК ID,
		|	ОчередьRMQ.Сообщение КАК Сообщение,
		|	ОчередьRMQ.Маршрутизация КАК Маршрутизация
		|ИЗ
		|	РегистрСведений.ОчередьRMQ КАК ОчередьRMQ
		|ГДЕ
		|	ОчередьRMQ.Маршрутизация = &Маршрутизация";
	Запрос.УстановитьПараметр("Маршрутизация",Маршрут);
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КлиентКомпоненты = ПолучитьКомпонентуСервер();
		КлиентКомпоненты.Connect(ПараметрыRMQ.Адрес,ПараметрыRMQ.Порт,ПараметрыRMQ.Логин,ПараметрыRMQ.Пароль,ПараметрыRMQ.ВиртуальныйХост);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 			
			Попытка							
				КлиентКомпоненты.BasicPublish(ПараметрыRMQ.ТочкаОбмена,Выборка.Маршрутизация,Выборка.Сообщение,1,Ложь); 
				
				//очистка очереди из 1С
				МЗ = РегистрыСведений.ОчередьRMQ.СоздатьМенеджерЗаписи();
				МЗ.ID = Выборка.ID; 
				МЗ.Удалить();
				
			Исключение
				СистемнаяОшибка = ОписаниеОшибки();
				ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
					
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


Процедура РегламентноеЗадание_ПрочитатьRMQ() Экспорт
	Маршрут = "CRM_NewOrder";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	Если ПараметрыRMQ = Неопределено Тогда
		ВызватьИсключение "Не заданы параметры подключения "+Маршрут;
	КонецЕсли;
	ПрочитатьRMQ_НовыеЗаказы(ПараметрыRMQ);
	
КонецПроцедуры 

Процедура ПрочитатьRMQ_НовыеЗаказы(ПараметрыRMQ) Экспорт
	Попытка
		КлиентКомпоненты = ПолучитьКомпонентуСервер();
		КлиентКомпоненты.Connect(ПараметрыRMQ.Адрес,ПараметрыRMQ.Порт,ПараметрыRMQ.Логин,ПараметрыRMQ.Пароль,ПараметрыRMQ.ВиртуальныйХост);	
		КлиентКомпоненты.DeclareQueue(ПараметрыRMQ.ИмяОчереди, Истина, Истина, Ложь, Ложь);
		
		Потребитель = КлиентКомпоненты.BasicConsume(ПараметрыRMQ.ИмяОчереди, "", Истина, Ложь, 0);
		
		ОтветноеСообщение = "";
		Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл		
			ЗагрузитьОбновитьЗаказ(ОтветноеСообщение);			
			КлиентКомпоненты.BasicAck();
		КонецЦикла;
		
		КлиентКомпоненты.BasicCancel("");
	Исключение
		ВызватьИсключение ""+КлиентКомпоненты.GetLastError() + ""+ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры


Процедура ЗагрузитьОбновитьЗаказ(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);  
	Данные = ПрочитатьJSON(ЧтениеJSON);            
	ЧтениеJSON.Закрыть();
	
	ЗаказСсылка = Документы.Заказ.НайтиПоРеквизиту("НомерCRM",Данные.Номер);
	Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
		//не обновлять
		Возврат;
	Иначе
		ЗаказОбъект = Документы.Заказ.СоздатьДокумент();
		ЗаказОбъект.НомерCRM = Данные.Номер;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Данные.КодКонтрагента) Тогда
		ЗаказОбъект.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("КодCRM",Данные.КодКонтрагента); 
	КонецЕсли;	
	ЗаказОбъект.Статус = Перечисления.СтатусыЗаказов.Новый;
	ЗаказОбъект.Дата = ТекущаяДата();
	Для каждого стрТовара из Данные.Товары Цикл
		НовСтр = ЗаказОбъект.Товары.Добавить();
		НовСтр.Количество = стрТовара.Количество;
		НовСтр.Сумма = стрТовара.Сумма;
		НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("КодCRM",стрТовара.КодНоменклатуры);
	КонецЦикла;
	ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры

Функция ПолучитьКомпонентуСервер() Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции  

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("КомпонентаRMQ");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, Новый УникальныйИдентификатор());
	
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	//Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции




