#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
   ЮТТесты.ДобавитьТестовыйНабор("RMQ")
		.ВТранзакции()
		.ДобавитьТест("ОтправкаИПрием_ОстаткиНоменклатуры",,"Позитив")
		.ДобавитьТест("ОтправкаИПрием_НовыйЗаказ",,"Позитив")
		.ДобавитьТест("ОтправкаИПрием_СтатусЗаказа",,"Позитив")	;

КонецПроцедуры

Процедура ОтправкаИПрием_ОстаткиНоменклатуры() Экспорт
	
	//подготовка
	Количество = 10;
	CRM_НоменклатураСсылка = СозданиеCRM_Номенклатуры();
	НоменклатураСсылка = СозданиеНоменклатуры(CRM_НоменклатураСсылка.Наименование,CRM_НоменклатураСсылка.Код);	
	ПриходОбъект = СоздатьПриход(НоменклатураСсылка,Количество,Истина);
	
	//проверка что СвободныйОстаток <> Количеству
	ЮТест.ОжидаетЧто(CRM_НоменклатураСсылка)
		.Свойство("СвободныйОстаток").НеРавно(Количество);
		
	//отправка
	Маршрут = "CRM_remaining";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(ПараметрыRMQ).
		НеРавно(Неопределено);
			
	RMQ.ОтправитьВRMQ_ОстаткиТоваров(ПараметрыRMQ,Маршрут);
	
	//Получение
	Маршрут = "CRM_remaining";  
	CRM_ПараметрыRMQ = РегистрыСведений.CRM_ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(CRM_ПараметрыRMQ).
		НеРавно(Неопределено);			
	CRM_RMQ.ПрочитатьRMQ_ОстаткиТоваров(CRM_ПараметрыRMQ);
	
	//проверка что установилось
	ЮТест.ОжидаетЧто(CRM_НоменклатураСсылка)
		.Свойство("СвободныйОстаток").Равно(Количество);
	
КонецПроцедуры 
	
Процедура ОтправкаИПрием_НовыйЗаказ() Экспорт
	
	//подготовка
	Количество = 5;
	Сумма = 100;
	CRM_НоменклатураСсылка = СозданиеCRM_Номенклатуры();
	НоменклатураСсылка = СозданиеНоменклатуры(CRM_НоменклатураСсылка.Наименование,CRM_НоменклатураСсылка.Код);	
	CRM_ЗаказОбъект = СоздатьCRM_Заказ(НоменклатураСсылка,Перечисления.CRM_СтатусыЗаказов.Оплачен,Количество,Сумма,Истина);
	НомерCRM = CRM_ЗаказОбъект.Номер;
	
	//проверка что такого заказа еще нет  
	ЮТест.ОжидаетЧтоТаблицаБазы("Документ.Заказ")
		.НеСодержитЗаписи(ЮТест.Предикат()
        .Реквизит("НомерCRM").Равно(НомерCRM));
		
	//Отправка
	Маршрут = "CRM_NewOrder";  
	CRM_ПараметрыRMQ = РегистрыСведений.CRM_ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(CRM_ПараметрыRMQ).
		НеРавно(Неопределено);			
	CRM_RMQ.ОтправитьВRMQ_НовыеЗаказы(CRM_ПараметрыRMQ,Маршрут);
	
	//Получение
	Маршрут = "CRM_NewOrder";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(ПараметрыRMQ).
		НеРавно(Неопределено);		
	RMQ.ПрочитатьRMQ_НовыеЗаказы(ПараметрыRMQ);
	
	
	//проверка что создался  
	ЮТест.ОжидаетЧтоТаблицаБазы("Документ.Заказ")
		.СодержитЗаписи(ЮТест.Предикат()
        .Реквизит("НомерCRM").Равно(НомерCRM));
			
КонецПроцедуры

Процедура ОтправкаИПрием_СтатусЗаказа() Экспорт
	
	//подготовка
	Количество = 5;
	Сумма = 100; 
	CRM_НоменклатураСсылка = СозданиеCRM_Номенклатуры();
	НоменклатураСсылка = СозданиеНоменклатуры(CRM_НоменклатураСсылка.Наименование,CRM_НоменклатураСсылка.Код);	
	CRM_ЗаказОбъект = СоздатьCRM_Заказ(НоменклатураСсылка,Перечисления.CRM_СтатусыЗаказов.Оплачен,Количество,Сумма,Истина);	
	ЗаказОбъект = СоздатьЗаказПоCRM_Заказу(CRM_ЗаказОбъект,Перечисления.СтатусыЗаказов.Новый,Истина);		
	
	//--------------------------------------------
	//1. Проверка отправки статуса CRM "ВСборке"	
	//отправка
	Маршрут = "CRM_OrderStatus";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(ПараметрыRMQ).НеРавно(Неопределено);		
	RMQ.ОтправитьВRMQ_СтатусыЗаказов(ПараметрыRMQ,Маршрут);
	
	//Получение
	Маршрут = "CRM_OrderStatus";  
	CRM_ПараметрыRMQ = РегистрыСведений.CRM_ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(CRM_ПараметрыRMQ).НеРавно(Неопределено);			
	CRM_RMQ.ПрочитатьRMQ_СтатусыЗаказов(CRM_ПараметрыRMQ);
	
	//проверка что статус обновился на ВСборке 
	ЮТест.ОжидаетЧто(CRM_ЗаказОбъект.Ссылка)
		.Свойство("Статус").Равно(Перечисления.CRM_СтатусыЗаказов.ВСборке);
		
	//--------------------------------------------
	//2. Проверка отправки статуса "Собран"
	ЗаказОбъект.Статус = Перечисления.СтатусыЗаказов.Собран;
	//провести
	ЮТест.ОжидаетЧто(ЗаказОбъект)
			.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный))
			.НеВыбрасываетИсключение()	
		;

	//отправка
	Маршрут = "CRM_OrderStatus";  
	ПараметрыRMQ = РегистрыСведений.ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(ПараметрыRMQ).НеРавно(Неопределено);		
	RMQ.ОтправитьВRMQ_СтатусыЗаказов(ПараметрыRMQ,Маршрут);
	
	//Получение
	Маршрут = "CRM_OrderStatus";  
	CRM_ПараметрыRMQ = РегистрыСведений.CRM_ПараметрыПодключенияRMQ.ПолучитьНастройки(Маршрут);
	ЮТест.ОжидаетЧто(CRM_ПараметрыRMQ).НеРавно(Неопределено);			
	CRM_RMQ.ПрочитатьRMQ_СтатусыЗаказов(CRM_ПараметрыRMQ);
	
	//проверка что статус обновился на Собран 
	ЮТест.ОжидаетЧто(CRM_ЗаказОбъект.Ссылка)
		.Свойство("Статус").Равно(Перечисления.CRM_СтатусыЗаказов.Собран);
	
	
	
КонецПроцедуры 


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СозданиеНоменклатуры(Наименование,КодCRM)
		
	Конструктор = ЮТест.Данные().КонструкторОбъекта("Справочники.Номенклатура")
		.ФикцияОбязательныхПолей()
		.Установить("КодCRM", КодCRM)
		.Установить("Наименование", Наименование)
		;
    НовСсылка = Конструктор.Записать();
	
	Возврат НовСсылка;

КонецФункции

Функция СозданиеCRM_Номенклатуры()
		
    НовСсылка = ЮТест.Данные().СоздатьЭлемент("Справочники.CRM_Номенклатура");
	
	Возврат НовСсылка;

КонецФункции

Функция СоздатьПриход(Номенклатура,Количество,Проведение)
	Конструктор = ЮТест.Данные().КонструкторОбъекта("Документы.Приход")
			.ФикцияОбязательныхПолей()	
			.Установить("Дата", ТекущаяДатаСеанса() - 100)
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Номенклатура", Номенклатура)
				.Установить("Количество", Количество) 
			;
			
	Если Проведение Тогда
		ВозвратОбъект = Конструктор.Провести(Истина);
	Иначе 
		ВозвратОбъект = Конструктор.Записать(Истина);	
	КонецЕсли;
	
	Возврат ВозвратОбъект;
	
КонецФункции

Функция СоздатьCRM_Заказ(Номенклатура,Статус,Количество,Сумма,Проведение)
	Конструктор = ЮТест.Данные().КонструкторОбъекта("Документы.CRM_Заказ")
			.ФикцияОбязательныхПолей()	
			.Установить("Дата", ТекущаяДатаСеанса())
			.Установить("Статус", Статус)
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Номенклатура", Номенклатура)
				.Установить("Количество", Количество) 
				.Установить("Сумма", Сумма)
			;
			
	Если Проведение Тогда
		ВозвратОбъект = Конструктор.Провести(Истина);
	Иначе 
		ВозвратОбъект = Конструктор.Записать(Истина);	
	КонецЕсли;
	
	Возврат ВозвратОбъект;
	
КонецФункции


Функция СоздатьЗаказПоCRM_Заказу(CRM_ЗаказОбъект,Статус,Проведение)	
    Если ЗначениеЗаполнено(CRM_ЗаказОбъект.Клиент.Код) Тогда
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("КодCRM",CRM_ЗаказОбъект.Клиент.Код);
	Иначе
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
	Конструктор = ЮТест.Данные().КонструкторОбъекта("Документы.Заказ")		
			.Установить("Дата", CRM_ЗаказОбъект.Дата)
			.Установить("Контрагент", Контрагент)
			.Установить("Статус", Статус)
			.Установить("НомерCRM", CRM_ЗаказОбъект.Номер)
			.ФикцияОбязательныхПолей()
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Номенклатура", CRM_ЗаказОбъект.Товары[0].Номенклатура)
				.Установить("Количество", CRM_ЗаказОбъект.Товары[0].Количество)
				.Установить("Сумма", CRM_ЗаказОбъект.Товары[0].Сумма)
	;
	
	Если Проведение Тогда
		ВозвратОбъект = Конструктор.Провести(Истина);
	Иначе 
		ВозвратОбъект = Конструктор.Записать(Истина);	
	КонецЕсли;
	
	Возврат ВозвратОбъект;
	
КонецФункции



#КонецОбласти